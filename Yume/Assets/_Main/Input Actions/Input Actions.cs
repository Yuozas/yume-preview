//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Main/Input Actions/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""Walking"",
            ""id"": ""f351c44e-8a2f-4f87-9071-87cdc42c7e54"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fffb72e5-8069-4f91-9ebc-679df0ec5b57"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ce403746-3cd2-43d9-abe1-e506f1ca7884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""5d8cba40-d314-4c20-b57b-cd917def9671"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""29431ce2-4177-4496-a3e8-c0b785247e3e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""On Foot;Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""56c220b8-caff-4ff3-92ab-3f188cb92039"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""On Foot;Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb53c25c-242c-4ce4-b26d-06d97741ec71"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""On Foot;Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""41ae133b-02f3-4d24-a8b0-63c5dce45d6e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""On Foot;Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""39298070-bae9-4a4b-ba13-0ed9652a2d68"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Talking"",
            ""id"": ""9776ee44-8653-4289-953f-0154cb7942e6"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a52a55b4-10ef-4c23-bf60-242f6a25e57b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e69f5b4-1afd-41d0-81a6-a60b5f118baf"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Unity Editor"",
            ""id"": ""e1afbf7f-0253-48e2-91af-daae12805432"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""cdf83d9c-f3d0-4a6b-966d-79a7c0ebd7ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f491c18-80bd-4a2e-af6c-00b095d5a27d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""In-game"",
            ""id"": ""13044975-37d5-4f15-bb78-8833b6b93ffa"",
            ""actions"": [
                {
                    ""name"": ""Backpack menu"",
                    ""type"": ""Button"",
                    ""id"": ""c55b4f52-140b-4ed0-a201-9b3f4cd869bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Settings menu"",
                    ""type"": ""Button"",
                    ""id"": ""b3238317-bf21-430c-8a81-6d8591eabd1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c3246bf-c83f-4dc6-bc86-67f4eb195928"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Backpack menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36dde1a4-676a-4237-b0ec-2f549fc48cce"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Settings menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""In-game Menu"",
            ""id"": ""b031db69-9d5d-4076-b126-db60a5c1fdd7"",
            ""actions"": [
                {
                    ""name"": ""Exit "",
                    ""type"": ""Button"",
                    ""id"": ""b304ce11-9473-4e61-801e-9c6f9f6859ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ebb5079b-8fb9-47f3-83ec-a49b0bb5a883"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit "",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Walking
        m_Walking = asset.FindActionMap("Walking", throwIfNotFound: true);
        m_Walking_Movement = m_Walking.FindAction("Movement", throwIfNotFound: true);
        m_Walking_Interact = m_Walking.FindAction("Interact", throwIfNotFound: true);
        // Talking
        m_Talking = asset.FindActionMap("Talking", throwIfNotFound: true);
        m_Talking_Interact = m_Talking.FindAction("Interact", throwIfNotFound: true);
        // Unity Editor
        m_UnityEditor = asset.FindActionMap("Unity Editor", throwIfNotFound: true);
        m_UnityEditor_Escape = m_UnityEditor.FindAction("Escape", throwIfNotFound: true);
        // In-game
        m_Ingame = asset.FindActionMap("In-game", throwIfNotFound: true);
        m_Ingame_Backpackmenu = m_Ingame.FindAction("Backpack menu", throwIfNotFound: true);
        m_Ingame_Settingsmenu = m_Ingame.FindAction("Settings menu", throwIfNotFound: true);
        // In-game Menu
        m_IngameMenu = asset.FindActionMap("In-game Menu", throwIfNotFound: true);
        m_IngameMenu_Exit = m_IngameMenu.FindAction("Exit ", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Walking
    private readonly InputActionMap m_Walking;
    private List<IWalkingActions> m_WalkingActionsCallbackInterfaces = new List<IWalkingActions>();
    private readonly InputAction m_Walking_Movement;
    private readonly InputAction m_Walking_Interact;
    public struct WalkingActions
    {
        private @InputActions m_Wrapper;
        public WalkingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Walking_Movement;
        public InputAction @Interact => m_Wrapper.m_Walking_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void AddCallbacks(IWalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_WalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IWalkingActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_WalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WalkingActions @Walking => new WalkingActions(this);

    // Talking
    private readonly InputActionMap m_Talking;
    private List<ITalkingActions> m_TalkingActionsCallbackInterfaces = new List<ITalkingActions>();
    private readonly InputAction m_Talking_Interact;
    public struct TalkingActions
    {
        private @InputActions m_Wrapper;
        public TalkingActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Talking_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Talking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TalkingActions set) { return set.Get(); }
        public void AddCallbacks(ITalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_TalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TalkingActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ITalkingActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ITalkingActions instance)
        {
            if (m_Wrapper.m_TalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_TalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TalkingActions @Talking => new TalkingActions(this);

    // Unity Editor
    private readonly InputActionMap m_UnityEditor;
    private List<IUnityEditorActions> m_UnityEditorActionsCallbackInterfaces = new List<IUnityEditorActions>();
    private readonly InputAction m_UnityEditor_Escape;
    public struct UnityEditorActions
    {
        private @InputActions m_Wrapper;
        public UnityEditorActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Escape => m_Wrapper.m_UnityEditor_Escape;
        public InputActionMap Get() { return m_Wrapper.m_UnityEditor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnityEditorActions set) { return set.Get(); }
        public void AddCallbacks(IUnityEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_UnityEditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnityEditorActionsCallbackInterfaces.Add(instance);
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IUnityEditorActions instance)
        {
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IUnityEditorActions instance)
        {
            if (m_Wrapper.m_UnityEditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnityEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_UnityEditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnityEditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnityEditorActions @UnityEditor => new UnityEditorActions(this);

    // In-game
    private readonly InputActionMap m_Ingame;
    private List<IIngameActions> m_IngameActionsCallbackInterfaces = new List<IIngameActions>();
    private readonly InputAction m_Ingame_Backpackmenu;
    private readonly InputAction m_Ingame_Settingsmenu;
    public struct IngameActions
    {
        private @InputActions m_Wrapper;
        public IngameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Backpackmenu => m_Wrapper.m_Ingame_Backpackmenu;
        public InputAction @Settingsmenu => m_Wrapper.m_Ingame_Settingsmenu;
        public InputActionMap Get() { return m_Wrapper.m_Ingame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameActions set) { return set.Get(); }
        public void AddCallbacks(IIngameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameActionsCallbackInterfaces.Add(instance);
            @Backpackmenu.started += instance.OnBackpackmenu;
            @Backpackmenu.performed += instance.OnBackpackmenu;
            @Backpackmenu.canceled += instance.OnBackpackmenu;
            @Settingsmenu.started += instance.OnSettingsmenu;
            @Settingsmenu.performed += instance.OnSettingsmenu;
            @Settingsmenu.canceled += instance.OnSettingsmenu;
        }

        private void UnregisterCallbacks(IIngameActions instance)
        {
            @Backpackmenu.started -= instance.OnBackpackmenu;
            @Backpackmenu.performed -= instance.OnBackpackmenu;
            @Backpackmenu.canceled -= instance.OnBackpackmenu;
            @Settingsmenu.started -= instance.OnSettingsmenu;
            @Settingsmenu.performed -= instance.OnSettingsmenu;
            @Settingsmenu.canceled -= instance.OnSettingsmenu;
        }

        public void RemoveCallbacks(IIngameActions instance)
        {
            if (m_Wrapper.m_IngameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameActions @Ingame => new IngameActions(this);

    // In-game Menu
    private readonly InputActionMap m_IngameMenu;
    private List<IIngameMenuActions> m_IngameMenuActionsCallbackInterfaces = new List<IIngameMenuActions>();
    private readonly InputAction m_IngameMenu_Exit;
    public struct IngameMenuActions
    {
        private @InputActions m_Wrapper;
        public IngameMenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_IngameMenu_Exit;
        public InputActionMap Get() { return m_Wrapper.m_IngameMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameMenuActions set) { return set.Get(); }
        public void AddCallbacks(IIngameMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameMenuActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IIngameMenuActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IIngameMenuActions instance)
        {
            if (m_Wrapper.m_IngameMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameMenuActions @IngameMenu => new IngameMenuActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IWalkingActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface ITalkingActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IUnityEditorActions
    {
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IIngameActions
    {
        void OnBackpackmenu(InputAction.CallbackContext context);
        void OnSettingsmenu(InputAction.CallbackContext context);
    }
    public interface IIngameMenuActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
